// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PersonalTrainerApi.Model.Database.Context;
using System;

namespace PersonalTrainerApi.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20180103224935_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.DayFoodDiary", b =>
                {
                    b.Property<Guid>("DayId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("TotalCalories");

                    b.Property<decimal>("TotalCarbohydrates");

                    b.Property<decimal>("TotalFat");

                    b.Property<decimal>("TotalProteins");

                    b.Property<Guid>("UserId");

                    b.HasKey("DayId");

                    b.HasIndex("UserId");

                    b.ToTable("DayFoodDiary");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.DiaryProduct", b =>
                {
                    b.Property<Guid>("DiaryProductId");

                    b.Property<Guid>("DayId");

                    b.Property<int>("MealType");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("DiaryProductId");

                    b.HasIndex("DayId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiaryProduct");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.Product", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProductState");

                    b.Property<int>("ProductType");

                    b.Property<Guid>("UserId");

                    b.HasKey("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.ProductDetails", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<decimal>("Calories");

                    b.Property<decimal>("Carbohydrates");

                    b.Property<decimal>("Fat");

                    b.Property<decimal>("Protein");

                    b.Property<int>("Quantity");

                    b.Property<int>("QuantityType");

                    b.HasKey("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.User", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<bool>("Administrator");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("HashCode")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.Property<int>("UserState");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.UserDetails", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("Age");

                    b.Property<int>("Gender");

                    b.Property<decimal>("Height");

                    b.Property<decimal>("Weight");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.UserGoal", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("Calories");

                    b.Property<int>("Carbohydrates");

                    b.Property<int>("Fat");

                    b.Property<int>("PercentageCarbs");

                    b.Property<int>("PercentageFat");

                    b.Property<int>("PercentageProtein");

                    b.Property<int>("Proteins");

                    b.HasKey("UserId");

                    b.ToTable("UserGoal");
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.DayFoodDiary", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.User", "User")
                        .WithMany("DayFoodDiary")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.DiaryProduct", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.DayFoodDiary", "Day")
                        .WithMany("DiaryProducts")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.Product", "Product")
                        .WithMany("DiaryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.Product", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.ProductDetails", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("PersonalTrainerApi.Model.Database.Entity.ProductDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.UserDetails", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("PersonalTrainerApi.Model.Database.Entity.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PersonalTrainerApi.Model.Database.Entity.UserGoal", b =>
                {
                    b.HasOne("PersonalTrainerApi.Model.Database.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
